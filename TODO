Subprojects:

The easy way:

* The `ergo` command searches up the path until it finds a "parent" project and
  executes there, always.
* The build process determines which workspace each task should run in in order
  to set up its path and environment correctly - however all tasks are given
  are connected to the same workspace project to report/determine depgraph
* Repeating: the *parent* project maintains the whole depgraph, even for child
  projects. Child tasks run in their directory but report to the parent
  workspace
* We need to be able to recognize that parent-child relationship. Cached graphs
  in the child become tricky.

Options for denoting parent-child:

* marker file in child .ergo directory (just ".is-child" or something)
* Or look for the parent-most .ergo workspace - parent child exists unless:
  parent until root, or a ".force-root-project" in .ergo
* parent includes a list of (or links to...) child projects <- this one

Algorithm for finding correct parent:

* From current dir: findup for a .ergo.
* break if none above
* Add to list.
* Check child-list in .ergo
* remove dirs from list in child list
* Set .ergo workspace to current dir.
* Repeat
* Earliest remaining item in list is the ergo workspace that contains starting
  dir

One irritation is that there's a parallel list of child projects and e.g. git
modules/subtrees.

Also maybe: search subdirs for unparented .ergo workspaces and either add them
to child lists or exclusion list.

Principle is that a child project doesn't *know* that it's a child project. It
should be able to build on its own, but once within a larger project, it's
depgraph caching no longer makes sense in that context.

*Maybe* there's a tool to "weld" in a child project and absorb its depgraph
cache, but that can wait.



The hard way:

* Child projects have their own workspaces.
* Introduce a new kind of dep - "into a subgraph"
* Determine that tasks are in child projects when dep is reported
* Parent graph has these "warp gate" deps into child -
  child has warp gates from parent.
* Actual graph processing (also and dep) involves processing the warp gates.
* Important question is: why?
